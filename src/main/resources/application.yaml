# 기본 환경 세팅
spring:
  profiles:
    active: local
---
# profile Group
spring:
  profiles:
    group:
      "local": common-config, classpath-property
      "unit-test": common-config, classpath-property
      "dev": common-config, classpath-property, cloud-property
      "stg": common-config, classpath-property, cloud-property
      "prd": common-config, classpath-property, cloud-property
---
#환경별 공통세팅
spring:
  application:
    name: product-project
  config:
    activate:
      on-profile: common-config
  flyway:
    enabled: false
  redis:
    host: localhost
    port: 6379
    password:
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 30MB

logging:
  level:
    org.springframework.web.servlet: trace
    #org.springframework.boot.autoconfigure: debug
    com.bubbleshop.product.infrastructure.feignclient: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

---
# 로컬
spring:
  config:
    activate:
      on-profile: local, default
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: product
    password: welcome
    url: jdbc:mysql://localhost:3306/product
  jpa:
    hibernate:
      ddl-auto: none
    database-platform: org.hibernate.dialect.MySQL57Dialect
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  flyway:
    enabled: true
    baseline-on-migrate: true
    #clean-on-validation-error: true
    locations: classpath:db/migration

host:
  member: localhost:8080

feign:
  client:
    config:
      default:
        connectTimeout: 3000
        readTimeout: 3000
        loggerLevel: full

cloud:
  aws:
    s3:
      host: http://localhost:4566
      access_key: product
      secret_key: welcome
      region: ap-east-1
      bucket-name: product

#  circuitbreaker:
#    enabled: true
#  circuitbreaker:
#    group:
#      enabled: true
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        waitDurationInOpenState: 30s # HALF_OPEN 상태로 빨리 전환되어 장애가 복구 될 수 있도록 기본값(60s)보다 작게 설정
#        slowCallRateThreshold: 80 # slowCall 발생 시 서버 스레드 점유로 인해 장애가 생길 수 있으므로 기본값(100)보다 조금 작게 설정
#        slowCallDurationThreshold: 5s # 위와 같은 이유로 5초를 slowCall로 판단함. 해당 값은 TimeLimiter의 timeoutDuration보다 작아야 함
#        registerHealthIndicator: true
#    instances:
#      producer-service:
#        baseConfig: default
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        waitDurationInOpenState: 30s # HALF_OPEN 상태로 빨리 전환되어 장애가 복구 될 수 있도록 기본값(60s)보다 작게 설정
#        slowCallRateThreshold: 80 # slowCall 발생 시 서버 스레드 점유로 인해 장애가 생길 수 있으므로 기본값(100)보다 조금 작게 설정
#        slowCallDurationThreshold: 5s # 위와 같은 이유로 5초를 slowCall로 판단함. 해당 값은 TimeLimiter의 timeoutDuration보다 작아야 함
#        registerHealthIndicator: true
#    instances:
#      default:
#        baseConfig: default
#  timelimiter:
#    configs:
#      default:
#        timeoutDuration: 6s # slowCallDurationThreshold보다는 크게 설정되어야 함
#        cancelRunningFuture: true

---
# 유닛 테스트
spring:
  config:
    activate:
      on-profile: unit-test
  datasource:
    driver-class-name: org.h2.Driver
    url: "jdbc:h2:mem:./data/localdb;DB_CLOSE_ON_EXIT=FALSE"
    username: sa
    password:
  h2:
    console:
      enabled: true
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

host:
  member: http://localhost:${wiremock.server.port}

cloud:
  aws:
    s3:
      bucket-name: product
---
# 개발
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username:
    password:
    url:
---
# 스테이징
spring:
  config:
    activate:
      on-profile: stg
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username:
    password:
    url:
---
# 운영
spring:
  config:
    activate:
      on-profile: prd
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username:
    password:
    url:
---
# properties 사용을 위한 profile
spring:
  config:
    activate:
      on-profile: classpath-property
    import: "classpath:properties/product/product-${spring.profiles.active}.yaml"
---
# cloud properties 사용을 위한 profile
spring:
  config:
    activate:
      on-profile: cloud-property
---
